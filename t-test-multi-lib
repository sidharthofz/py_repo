{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7e9f325e-c972-40e7-bfde-5cb09aa2521c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard library\n",
    "import math\n",
    "\n",
    "# Data handling\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Visualization\n",
    "import seaborn as sns\n",
    "\n",
    "# Statistical functions\n",
    "from scipy.stats import t\n",
    "from scipy.stats import ttest_1samp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "30ad6902-7e32-4e09-b4a4-f2ecdad5da33",
   "metadata": {},
   "outputs": [],
   "source": [
    "def t_test(mean, mu, std, n_samples):\n",
    "    test_score = (mean - mu) / (std / np.sqrt(n_samples))\n",
    "\n",
    "    p_value =  t.sf(abs(test_score), n_samples -1) *2 \n",
    "\n",
    "    print(\"One Sample t-test\")\n",
    "    print(\"t-score \", test_score, \"p-value: \",p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "266a9901-a85b-429d-9c9a-3315dee9df57",
   "metadata": {},
   "outputs": [],
   "source": [
    "employee_age_mean = 35 \n",
    "employee_age_sd = 7\n",
    "\n",
    "n_samples = 25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "06240e39-ef99-46cb-8541-6be68c416ebc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([30.52289981, 19.60838584, 32.21109961, 29.01767944, 29.33707441,\n",
       "       29.87046443, 36.94819568, 32.95260529, 37.90826395, 18.2551149 ,\n",
       "       38.29824734, 27.95395458, 46.5410327 , 41.23644729, 43.64460754,\n",
       "       38.28178101, 29.94120203, 25.05171293, 34.06309017, 34.74926985,\n",
       "       33.31620309, 33.31688639, 45.32389708, 38.03873389, 43.21103265])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "employee_ages = np.random.default_rng().normal(employee_age_mean,employee_age_sd,n_samples)\n",
    "\n",
    "employee_ages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e1d0010b-433d-4a8a-9863-76b1251b9a0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>43.211033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>46.541033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>36.948196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>34.063090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>43.644608</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          age\n",
       "24  43.211033\n",
       "12  46.541033\n",
       "6   36.948196\n",
       "18  34.063090\n",
       "14  43.644608"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "employee_ages_df = pd.DataFrame({\"age\" : employee_ages})\n",
    "\n",
    "employee_ages_df.sample(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a9143b31-adba-42f0-bc51-2758c568cddc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1300aacd0>"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(employee_ages_df,kde=True,bins=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "661e415f-19cc-45ad-b7c0-bc10c9a0ccb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One Sample t-test\n",
      "t-score  -0.011033618955999363 p-value:  0.9912878314369541\n"
     ]
    }
   ],
   "source": [
    "mu=34\n",
    "\n",
    "t_test(employee_ages_df['age'].mean(),\n",
    "       mu,\n",
    "       employee_ages_df['age'].std(),\n",
    "       n_samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "450f9232-8cd0-424c-a8c9-e4e810384da6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(np.float64(-0.011033618955999363), np.float64(0.9912878314369541))"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_statistic, p_value = ttest_1samp(employee_ages_df['age'],\n",
    "                                   mu)\n",
    "t_statistic, p_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "0809a22c-a8e6-4026-a704-085e6c024cbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "values_mean = 35\n",
    "values_decay = 0.2\n",
    "\n",
    "n_samples=25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "baf35908-dd6d-4640-b91b-8365fd76341d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([34.5667912 , 35.24116638, 35.21487654, 34.781802  , 35.2342622 ,\n",
       "       35.18777805, 34.90598791, 35.04801947, 35.28704583, 35.4542543 ,\n",
       "       35.33603865, 35.09993252, 35.03815451, 35.31553409, 35.13127328,\n",
       "       34.99536325, 34.78694516, 35.21215346, 34.74751309, 34.95116634,\n",
       "       35.59496798, 34.9434147 , 34.58108669, 35.02471558, 35.0270731 ])"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values=np.random.default_rng().laplace(values_mean,values_decay,n_samples)\n",
    "values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "ef82f306-a4ab-428a-86e5-46b0470d4ddc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>34.747513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>34.951166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35.214877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>35.315534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>35.287046</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        value\n",
       "18  34.747513\n",
       "19  34.951166\n",
       "2   35.214877\n",
       "13  35.315534\n",
       "8   35.287046"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values_df= pd.DataFrame({\"value\": values})\n",
    "values_df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "05eeea98-0fc0-4064-9894-59a8ea72617e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x13012cd60>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 588x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(values_df, kde=True, bins=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "ce339f1b-ba07-4d53-bf65-152979d3cf6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One Sample t-test\n",
      "t-score  -97.19406471315735 p-value:  1.1318214634374697e-32\n"
     ]
    }
   ],
   "source": [
    "mu = 40\n",
    "t_test(values_df['value'].mean(), mu, values_df['value'].std(),n_samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "0ee80f53-d12c-49b3-a9a8-b25401146674",
   "metadata": {},
   "outputs": [],
   "source": [
    "values_mean=35\n",
    "values_scale=5\n",
    "\n",
    "n_samples=25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "661a02c2-7e6c-49f8-8fee-c48041eb7651",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  5.21642277, 103.2007145 ,  45.52867892,  13.78755854,\n",
       "         3.06325148,  24.71028475,  24.50728563, 131.27913382,\n",
       "         7.05448239,  57.32155372,  64.18539969,   1.69022957,\n",
       "        11.67905677,  40.17687941,  97.51037975,  32.70672968,\n",
       "         4.26904642,   7.61472426,  11.91877365,  75.11375002,\n",
       "        12.57839215,   5.58053663,  96.5549578 , 147.54783437,\n",
       "         8.21372969])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values=np.random.default_rng().wald(values_mean,values_scale,n_samples)\n",
    "values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "f26d4fe5-b661-4af8-ab6a-fa2f43ed6d2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>32.706730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>131.279134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>57.321554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>75.113750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.787559</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         value\n",
       "15   32.706730\n",
       "7   131.279134\n",
       "9    57.321554\n",
       "19   75.113750\n",
       "3    13.787559"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values_df=pd.DataFrame({\"value\": values})\n",
    "values_df.sample(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "e8883126-cdcb-4ad6-9d49-25f75b36ae06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41.32039145539527\n"
     ]
    }
   ],
   "source": [
    "print(np.mean(values_df['value']))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "5d627a86-dba0-40f8-8d35-b5a6adc215db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x13019ea30>"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 588x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(values_df, kde=True, bins=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b5da7931-8bca-494e-9455-ae967eefb5d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One Sample t-test\n",
      "t-score  0.38042432586488184 p-value:  0.7069766973501809\n"
     ]
    }
   ],
   "source": [
    "mu=38\n",
    "\n",
    "t_test(values_df['value'].mean(),\n",
    "       mu,\n",
    "       values_df['value'].std(),\n",
    "       n_samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "7e79ec54-64c0-4ee0-a72a-8f1c6f6a019f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         value\n",
      "0     5.216423\n",
      "1   103.200715\n",
      "2    45.528679\n",
      "3    13.787559\n",
      "4     3.063251\n",
      "5    24.710285\n",
      "6    24.507286\n",
      "7   131.279134\n",
      "8     7.054482\n",
      "9    57.321554\n",
      "10   64.185400\n",
      "11    1.690230\n",
      "12   11.679057\n",
      "13   40.176879\n",
      "14   97.510380\n",
      "15   32.706730\n",
      "16    4.269046\n",
      "17    7.614724\n",
      "18   11.918774\n",
      "19   75.113750\n",
      "20   12.578392\n",
      "21    5.580537\n",
      "22   96.554958\n",
      "23  147.547834\n",
      "24    8.213730\n"
     ]
    }
   ],
   "source": [
    "print(values_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9ab6b12-c877-4e09-81b0-5ef8ba1e0bf4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
